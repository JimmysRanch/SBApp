name: Prod Rollout

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Must be production"
        required: true
        default: "production"
      confirm_prod:
        description: "Type YES to confirm"
        required: true
        default: "NO"
      pr_number:
        description: "PR for comment"
        required: false
        default: "328"

env:
  ROLLOUT_TIMESTAMP: ${{ github.run_id }}-${{ github.run_number }}

jobs:
  prod:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Validate
        run: |
          if [ "${{ github.event.inputs.env }}" != "production" ]; then
            echo "env must be production"
            exit 1
          fi
          if [ "${{ github.event.inputs.confirm_prod }}" != "YES" ]; then
            echo "confirm_prod must be YES"
            exit 1
          fi

      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Supabase CLI (resilient)
        id: supabase_cli
        run: |
          set -e
          echo "Attempting to download latest Supabase CLI binary..."
          ARCH=$(uname -m)
          # Normalize arch for Supabase naming
            case "$ARCH" in
              x86_64) ARCH=amd64 ;;
              aarch64) ARCH=arm64 ;;
            esac
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          BIN_URL="https://github.com/supabase/cli/releases/latest/download/supabase_${OS}_${ARCH}.tar.gz"
          echo "URL: $BIN_URL"
          if curl -fsSL "$BIN_URL" | tar -xz -C /usr/local/bin supabase 2>/dev/null; then
            echo "Binary installed."
          else
            echo "Binary download failed, falling back to npm install..."
            npm install -g supabase
          fi
          echo "Installed version:"
          supabase --version || { echo "Supabase CLI not found after install"; exit 1; }

      - name: Write config
        run: |
          mkdir -p supabase
          echo "project_id = \"${{ secrets.SUPABASE_PROJECT_REF }}\"" > supabase/config.toml
          echo "Config written."

      - name: DB Push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          supabase db push --project-ref "${{ secrets.SUPABASE_PROJECT_REF }}"

      - name: Install deps
        run: |
          npm install @supabase/supabase-js ts-node typescript

      - name: Run smoke test
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          if [ ! -f scripts/prod_smoke.ts ]; then
            echo "scripts/prod_smoke.ts missing"; exit 1;
          fi
          npx ts-node scripts/prod_smoke.ts > smoke-results.json

      - name: Summarize
        run: |
          {
            echo "## Rollout Summary"
            echo
            echo "**Run ID:** $GITHUB_RUN_ID"
            echo "**Timestamp:** $(date -u)"
            echo
            echo "### Smoke Test JSON (truncated)"
            echo '```json'
            head -n 120 smoke-results.json || true
            echo '```'
          } > summary.md

      - uses: actions/upload-artifact@v4
        with:
          name: core-${{ env.ROLLOUT_TIMESTAMP }}
          path: |
            smoke-results.json
            summary.md
