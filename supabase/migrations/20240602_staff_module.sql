-- Staff module schema and supporting routines

create table if not exists public.employees (
  id bigint generated by default as identity primary key,
  name text,
  email text,
  phone text,
  active boolean default true,
  role text,
  status text,
  address_street text,
  address_city text,
  address_state text,
  address_zip text,
  avatar_url text,
  emergency_contact_name text,
  emergency_contact_phone text,
  pay_type text,
  commission_rate numeric,
  hourly_rate numeric,
  salary_rate numeric,
  app_permissions jsonb default '{}'::jsonb,
  preferred_breeds text[] default '{}',
  not_accepted_breeds text[] default '{}',
  specialties text[] default '{}',
  manager_notes text,
  created_at timestamptz not null default timezone('utc'::text, now())
);

create table if not exists public.staff_goals (
  staff_id bigint primary key references public.employees(id) on delete cascade,
  weekly_revenue_target numeric,
  desired_dogs_per_day int,
  updated_at timestamptz not null default timezone('utc'::text, now())
);

create table if not exists public.appointment_discounts (
  id bigserial primary key,
  appointment_id bigint not null references public.appointments(id) on delete cascade,
  amount numeric not null check (amount >= 0),
  reason text not null,
  created_by bigint references public.employees(id),
  created_at timestamptz not null default timezone('utc'::text, now())
);

create table if not exists public.staff_shifts (
  id bigserial primary key,
  employee_id bigint not null references public.employees(id) on delete cascade,
  starts_at timestamptz not null,
  ends_at timestamptz not null,
  note text,
  created_at timestamptz not null default timezone('utc'::text, now())
);

create table if not exists public.staff_time_off (
  id bigserial primary key,
  employee_id bigint not null references public.employees(id) on delete cascade,
  starts_at timestamptz not null,
  ends_at timestamptz not null,
  reason text not null,
  status text not null default 'pending',
  created_at timestamptz not null default timezone('utc'::text, now())
);

create or replace view public.payroll_lines_view as
select
  a.id as appointment_id,
  a.employee_id as staff_id,
  a.start_time,
  a.end_time,
  a.service,
  coalesce(a.price, 0)::numeric as base_price,
  coalesce(e.commission_rate, 0)::numeric as commission_rate,
  coalesce(a.price, 0)::numeric * coalesce(e.commission_rate, 0)::numeric as commission_amount,
  -coalesce(d.total_discount, 0)::numeric as adjustment_amount,
  d.reasons as adjustment_reason,
  coalesce(a.price, 0)::numeric + coalesce(a.price, 0)::numeric * coalesce(e.commission_rate, 0)::numeric - coalesce(d.total_discount, 0)::numeric as final_earnings,
  case
    when a.start_time is null then null
    else ((floor((extract(doy from a.start_time) - 1) / 7)::int % 2) + 1)
  end as week_index
from public.appointments a
join public.employees e on e.id = a.employee_id
left join lateral (
  select
    coalesce(sum(amount), 0) as total_discount,
    string_agg(reason, '; ' order by created_at) as reasons
  from public.appointment_discounts ad
  where ad.appointment_id = a.id
) d on true;

create or replace function public.staff_today_metrics(staff_id bigint)
returns table(dogs integer, hours numeric)
language sql
security definer
set search_path = public
as $$
  select
    count(*)::int as dogs,
    coalesce(sum(greatest(extract(epoch from coalesce(a.end_time, a.start_time) - a.start_time) / 3600, 0)), 0)::numeric as hours
  from public.appointments a
  where a.employee_id = staff_id
    and a.start_time >= date_trunc('day', now())
    and a.start_time < date_trunc('day', now()) + interval '1 day';
$$;

create or replace function public.staff_week_metrics(staff_id bigint)
returns table(dogs integer, revenue numeric, commission numeric)
language sql
security definer
set search_path = public
as $$
  select
    count(*)::int as dogs,
    coalesce(sum(coalesce(a.price, 0)), 0)::numeric as revenue,
    coalesce(sum(coalesce(a.price, 0) * coalesce(e.commission_rate, 0)), 0)::numeric as commission
  from public.appointments a
  join public.employees e on e.id = a.employee_id
  where a.employee_id = staff_id
    and a.start_time >= date_trunc('week', now())
    and a.start_time < date_trunc('week', now()) + interval '7 days';
$$;

create or replace function public.staff_lifetime_metrics(staff_id bigint)
returns table(dogs integer, revenue numeric)
language sql
security definer
set search_path = public
as $$
  select
    count(*)::int as dogs,
    coalesce(sum(coalesce(a.price, 0)), 0)::numeric as revenue
  from public.appointments a
  where a.employee_id = staff_id;
$$;

grant execute on function public.staff_today_metrics(bigint) to authenticated;
grant execute on function public.staff_week_metrics(bigint) to authenticated;
grant execute on function public.staff_lifetime_metrics(bigint) to authenticated;

alter table public.employees enable row level security;
alter table public.staff_goals enable row level security;
alter table public.appointment_discounts enable row level security;
alter table public.staff_shifts enable row level security;
alter table public.staff_time_off enable row level security;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='employees' AND policyname='Employees base view') THEN
    EXECUTE $P$CREATE POLICY "Employees base view" ON public.employees
      FOR SELECT USING (
        auth.role() = 'authenticated'
        AND (manager_notes IS NULL OR coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='employees' AND policyname='Employees manager view') THEN
    EXECUTE $P$CREATE POLICY "Employees manager view" ON public.employees
      FOR SELECT USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='employees' AND policyname='Employees manager update') THEN
    EXECUTE $P$CREATE POLICY "Employees manager update" ON public.employees
      FOR UPDATE USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      WITH CHECK (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='appointment_discounts' AND policyname='Appointment discounts read') THEN
    EXECUTE $P$CREATE POLICY "Appointment discounts read" ON public.appointment_discounts
      FOR SELECT USING (auth.role() = 'authenticated');$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='appointment_discounts' AND policyname='Appointment discounts manage') THEN
    EXECUTE $P$CREATE POLICY "Appointment discounts manage" ON public.appointment_discounts
      FOR ALL USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      WITH CHECK (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_goals' AND policyname='Staff goals read') THEN
    EXECUTE $P$CREATE POLICY "Staff goals read" ON public.staff_goals
      FOR SELECT USING (
        auth.role() = 'authenticated'
        AND (
          coalesce((auth.jwt() ->> 'is_manager')::boolean, false)
          OR staff_id::text = coalesce(auth.jwt() ->> 'employee_id', '0')
        )
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_goals' AND policyname='Staff goals manage') THEN
    EXECUTE $P$CREATE POLICY "Staff goals manage" ON public.staff_goals
      FOR ALL USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      WITH CHECK (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_shifts' AND policyname='Staff shifts read') THEN
    EXECUTE $P$CREATE POLICY "Staff shifts read" ON public.staff_shifts
      FOR SELECT USING (
        auth.role() = 'authenticated'
        AND (
          employee_id::text = coalesce(auth.jwt() ->> 'employee_id', '0')
          OR coalesce((auth.jwt() ->> 'is_manager')::boolean, false)
        )
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_shifts' AND policyname='Staff shifts self insert') THEN
    EXECUTE $P$CREATE POLICY "Staff shifts self insert" ON public.staff_shifts
      FOR INSERT WITH CHECK (
        auth.role() = 'authenticated'
        AND employee_id::text = coalesce(auth.jwt() ->> 'employee_id', '0')
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_shifts' AND policyname='Staff shifts manage') THEN
    EXECUTE $P$CREATE POLICY "Staff shifts manage" ON public.staff_shifts
      FOR ALL USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      WITH CHECK (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_time_off' AND policyname='Time off read') THEN
    EXECUTE $P$CREATE POLICY "Time off read" ON public.staff_time_off
      FOR SELECT USING (
        auth.role() = 'authenticated'
        AND (
          employee_id::text = coalesce(auth.jwt() ->> 'employee_id', '0')
          OR coalesce((auth.jwt() ->> 'is_manager')::boolean, false)
        )
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_time_off' AND policyname='Time off request') THEN
    EXECUTE $P$CREATE POLICY "Time off request" ON public.staff_time_off
      FOR INSERT WITH CHECK (
        auth.role() = 'authenticated'
        AND employee_id::text = coalesce(auth.jwt() ->> 'employee_id', '0')
      );$P$;
  END IF;

  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE schemaname='public' AND tablename='staff_time_off' AND policyname='Time off manage') THEN
    EXECUTE $P$CREATE POLICY "Time off manage" ON public.staff_time_off
      FOR UPDATE USING (coalesce((auth.jwt() ->> 'is_manager')::boolean, false))
      WITH CHECK (coalesce((auth.jwt() ->> 'is_manager')::boolean, false));$P$;
  END IF;
END$$;
